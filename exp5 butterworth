ii) Butterworth Low pass filter

code-
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Load Image
image = cv2.imread('lena.jpeg', cv2.IMREAD_GRAYSCALE)  # Replace with your image path
if image is None:
    print("Image not found!")
    exit()

M, N = image.shape
P, Q = M // 2, N // 2  # Center of the image

# Step 2: Perform Fourier Transform
dft = np.fft.fft2(image)
dft_shift = np.fft.fftshift(dft)  # Shift zero frequency component to center
spectrum = np.log(1 + np.abs(dft_shift))  # Compute log spectrum for visualization

# Step 3: Create Butterworth Low-Pass Filter (BLPF)
D0 = 30  # Cutoff frequency
n = 2     # Order of the Butterworth filter

# Create meshgrid for u and v values
u = np.fft.fftfreq(M) * M
v = np.fft.fftfreq(N) * N
u, v = np.meshgrid(u, v)

# Calculate distance in the frequency domain
distance = np.sqrt((u - P)**2 + (v - Q)**2)

# Apply Butterworth formula
mask = 1 / (1 + (distance / D0)**(2 * n))

# Step 4: Apply BLPF (Transfer Function)
filtered_dft = dft_shift * mask  # Multiply frequency domain representation with mask
filtered_logspectrum = np.log(1 + np.abs(filtered_dft))  # Compute log magnitude for visualization

# Step 5: Perform Inverse Fourier Transform
idft_shift = np.fft.ifftshift(filtered_dft)  # Shift frequencies back to original position
img_filtered = np.fft.ifft2(idft_shift)     # Convert back to spatial domain
img_filtered = np.abs(img_filtered)         # Take absolute values to obtain real image

# Step 6: Display Results
plt.figure(figsize=(20, 8))

# Plot input image
plt.subplot(2, 3, 1)
plt.imshow(image, cmap="gray")
plt.title("Input Image")
plt.axis("off")

# Plot center shifted spectrum of input image
plt.subplot(2, 3, 2)
plt.imshow(np.abs(dft_shift), cmap="gray")
plt.title("Center Shifted Image Spectrum")
plt.axis("off")

# Plot shifted log spectrum of input image
plt.subplot(2, 3, 3)
plt.imshow(spectrum, cmap="gray")
plt.title("Log Transformed Image Spectrum")
plt.axis("off")

# Plot filter transfer function (Butterworth LPF)
plt.subplot(2, 3, 4)
plt.imshow(mask, cmap="gray")
plt.title("Butterworth LPF Transfer Function")
plt.axis("off")

# Plot filtered image spectrum
plt.subplot(2, 3, 5)
plt.imshow(filtered_logspectrum, cmap="gray")
plt.title("Filtered Image Spectrum")
plt.axis("off")

# Plot filtered image
plt.subplot(2, 3, 6)
plt.imshow(img_filtered, cmap="gray")
plt.title(f"Butterworth LP Filtered Image for D0={D0} and n={n}")
plt.axis("off")

plt.show()

