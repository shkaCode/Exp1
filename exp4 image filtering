4.To perform following image filtering operations in spatial domain.
1. Averaging or smoothing
2. Sharpening
3. Unsharp Marsking
4. Highboost Filtering
5. Median Filterin





1.Averagig 

#Perform Smoothing(Averaging)
import numpy as np
import cv2
import matplotlib.pyplot as plt
image=cv2.imread("cameramen.jpg",cv2.IMREAD_GRAYSCALE)
if image is None:
 print("Error in reading the image!")
 exit()
else:
 print("Image loaded successfully")
kernel_1=np.ones((3,3),np.float32)/9
kernel_2=np.ones((9,9),np.float32)/81
kernel_3=np.ones((15,15),np.float32)/225
out_img1=cv2.filter2D(image,-1,kernel_1)
out_img2=cv2.filter2D(image,-1,kernel_2)
out_img3=cv2.filter2D(image,-1,kernel_3)
plt.figure(figsize=(5,5))
plt.subplot(2,2,1)
plt.imshow(image,cmap='gray')
plt.title("Original Image")
plt.axis('off')
plt.subplot(2,2,2)
plt.imshow(out_img1,cmap='gray')
plt.title("Averaging by 3*3 kernel")
plt.axis('off')
plt.subplot(2,2,3)
plt.imshow(out_img2,cmap='gray')
plt.title("Averaging by 9*9 kernel")
plt.axis('off')
plt.subplot(2,2,4)
plt.imshow(out_img3,cmap='gray')
plt.title("Averaging by 15*15 kernel")
plt.axis('off')
plt.show()





2. Sharpening

#HPF or Sharpening
import numpy as np
import cv2
import matplotlib.pyplot as plt
image=cv2.imread("cameramen.jpg",cv2.IMREAD_GRAYSCALE)
if image is None:
 print("Error in reading the image!")
 exit()

else:
   print("Image loaded successfully")
hpf_kernel1=np.array([[0,-1,0],[-1,4,-1],[0,-1,0]])
hpf_kernel2=np.array([[-1,-1,-1],[-1,8,-1],[-1,-1,-1]])
out_img1=cv2.filter2D(image,-1,hpf_kernel1)
out_img2=cv2.filter2D(image,-1,hpf_kernel2)
plt.figure(figsize=(10,5))
plt.subplot(1,3,1)
plt.imshow(image,cmap='gray')
plt.title("Original Image")
plt.axis('off')
plt.subplot(1,3,2)
plt.imshow(out_img1,cmap='gray')
plt.title("Sharpened Filter1")
plt.axis('off')
plt.subplot(1,3,3)
plt.imshow(out_img2,cmap='gray')
plt.title("Sharpened Filter2")
plt.axis('off')
plt.show()






3. Unsharp and highboost

#Unsharp Masking
import numpy as np
import cv2
import matplotlib.pyplot as plt
image=cv2.imread("cameramen.jpg",cv2.IMREAD_GRAYSCALE)
if image is None:
 print("Error in reading the image!")
 exit()
else:
 print("Image loaded successfully")
blurredimage=cv2.GaussianBlur(image,(5,5),0)
gmask=image-blurredimage
k1=1
out_1=image+k1*gmask
k2=2
out_2=image+k2*gmask
5
plt.figure(figsize=(10,5))
plt.subplot(3,2,1)
plt.imshow(image,cmap='gray')
plt.title("Original Image")
plt.axis('off')
plt.subplot(3,2,2)
plt.imshow(blurredimage,cmap='gray')
plt.title("Blurred Image")
plt.axis('off')
plt.subplot(3,2,3)
plt.imshow(gmask,cmap='gray')
plt.title("Mask Image")
plt.axis('off')
plt.subplot(3,2,4)
plt.imshow(out_1,cmap='gray')
plt.title("Unsharp Masking")
plt.axis('off')
plt.subplot(3,2,5)
plt.imshow(out_2,cmap='gray')
plt.title("High Boost Filtering(k=2)")
plt.axis('off')
plt.show()





4. Median filter

#Median Filtering
import numpy as np
import cv2
import matplotlib.pyplot as plt
image=cv2.imread("noise.jpg",cv2.IMREAD_GRAYSCALE)
if image is None:
 print("Error in reading the image!")
 exit()
else:
 print("Image loaded successfully")
filtered_img=cv2.medianBlur(image,5)
plt.subplot(1,2,1)
plt.imshow(image,cmap='gray')

plt.title("Original Image")
plt.axis('off')
plt.subplot(1,2,2)
plt.imshow(filtered_img,cmap='gray')
plt.title("Median Filtered Image")
plt.axis('off')
plt.show()


